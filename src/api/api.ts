/* tslint:disable */
/* eslint-disable */
/**
 * EvoStory.BackendAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ChoiceDTO
 */
export interface ChoiceDTO {
    /**
     * 
     * @type {string}
     * @memberof ChoiceDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ChoiceDTO
     */
    'nextSceneId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ChoiceDTO
     */
    'choiceText'?: string | null;
}
/**
 * 
 * @export
 * @interface ContentDTO
 */
export interface ContentDTO {
    /**
     * 
     * @type {string}
     * @memberof ContentDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ContentDTO
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ContentDTO
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDTO
     */
    'soundId'?: string;
}
/**
 * 
 * @export
 * @interface CreateChoiceDTO
 */
export interface CreateChoiceDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateChoiceDTO
     */
    'sceneId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChoiceDTO
     */
    'nextSceneId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateChoiceDTO
     */
    'choiceText'?: string | null;
}
/**
 * 
 * @export
 * @interface CreateContentDTO
 */
export interface CreateContentDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateContentDTO
     */
    'text'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateContentDTO
     */
    'imageId'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateContentDTO
     */
    'soundId'?: string;
}
/**
 * 
 * @export
 * @interface CreateSceneDTO
 */
export interface CreateSceneDTO {
    /**
     * 
     * @type {CreateContentDTO}
     * @memberof CreateSceneDTO
     */
    'content'?: CreateContentDTO;
    /**
     * 
     * @type {string}
     * @memberof CreateSceneDTO
     */
    'storyId'?: string;
    /**
     * 
     * @type {Array<CreateChoiceDTO>}
     * @memberof CreateSceneDTO
     */
    'choices'?: Array<CreateChoiceDTO> | null;
}
/**
 * 
 * @export
 * @interface CreateStoryDTO
 */
export interface CreateStoryDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateStoryDTO
     */
    'title': string | null;
    /**
     * 
     * @type {Array<CreateSceneDTO>}
     * @memberof CreateStoryDTO
     */
    'scenes'?: Array<CreateSceneDTO> | null;
    /**
     * 
     * @type {string}
     * @memberof CreateStoryDTO
     */
    'startingSceneId'?: string | null;
}
/**
 * 
 * @export
 * @interface EditStoryDTO
 */
export interface EditStoryDTO {
    /**
     * 
     * @type {string}
     * @memberof EditStoryDTO
     */
    'title': string | null;
    /**
     * 
     * @type {string}
     * @memberof EditStoryDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof EditStoryDTO
     */
    'startingSceneId'?: string | null;
    /**
     * 
     * @type {Array<SceneDTO>}
     * @memberof EditStoryDTO
     */
    'scenes'?: Array<SceneDTO> | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface SceneDTO
 */
export interface SceneDTO {
    /**
     * 
     * @type {string}
     * @memberof SceneDTO
     */
    'id': string;
    /**
     * 
     * @type {ContentDTO}
     * @memberof SceneDTO
     */
    'content'?: ContentDTO;
    /**
     * 
     * @type {Array<ChoiceDTO>}
     * @memberof SceneDTO
     */
    'choices'?: Array<ChoiceDTO> | null;
}
/**
 * 
 * @export
 * @interface StoryDTO
 */
export interface StoryDTO {
    /**
     * 
     * @type {string}
     * @memberof StoryDTO
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof StoryDTO
     */
    'title': string | null;
    /**
     * 
     * @type {Array<SceneDTO>}
     * @memberof StoryDTO
     */
    'scenes'?: Array<SceneDTO> | null;
    /**
     * 
     * @type {string}
     * @memberof StoryDTO
     */
    'startingSceneId'?: string;
}

/**
 * ChoiceApi - axios parameter creator
 * @export
 */
export const ChoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateChoiceDTO} [createChoiceDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChoice: async (createChoiceDTO?: CreateChoiceDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Choice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createChoiceDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChoice: async (choiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'choiceId' is not null or undefined
            assertParamExists('deleteChoice', 'choiceId', choiceId)
            const localVarPath = `/api/Choice/{choiceId}`
                .replace(`{${"choiceId"}}`, encodeURIComponent(String(choiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoice: async (choiceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'choiceId' is not null or undefined
            assertParamExists('getChoice', 'choiceId', choiceId)
            const localVarPath = `/api/Choice/{choiceId}`
                .replace(`{${"choiceId"}}`, encodeURIComponent(String(choiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoices: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Choice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChoiceApi - functional programming interface
 * @export
 */
export const ChoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateChoiceDTO} [createChoiceDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createChoice(createChoiceDTO?: CreateChoiceDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createChoice(createChoiceDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChoiceApi.createChoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteChoice(choiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteChoice(choiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChoiceApi.deleteChoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChoice(choiceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChoiceDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChoice(choiceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChoiceApi.getChoice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChoices(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateChoiceDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChoices(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ChoiceApi.getChoices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ChoiceApi - factory interface
 * @export
 */
export const ChoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChoiceApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateChoiceDTO} [createChoiceDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChoice(createChoiceDTO?: CreateChoiceDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createChoice(createChoiceDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteChoice(choiceId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteChoice(choiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} choiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoice(choiceId: string, options?: RawAxiosRequestConfig): AxiosPromise<ChoiceDTO> {
            return localVarFp.getChoice(choiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChoices(options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateChoiceDTO>> {
            return localVarFp.getChoices(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ChoiceApi - object-oriented interface
 * @export
 * @class ChoiceApi
 * @extends {BaseAPI}
 */
export class ChoiceApi extends BaseAPI {
    /**
     * 
     * @param {CreateChoiceDTO} [createChoiceDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoiceApi
     */
    public createChoice(createChoiceDTO?: CreateChoiceDTO, options?: RawAxiosRequestConfig) {
        return ChoiceApiFp(this.configuration).createChoice(createChoiceDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} choiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoiceApi
     */
    public deleteChoice(choiceId: string, options?: RawAxiosRequestConfig) {
        return ChoiceApiFp(this.configuration).deleteChoice(choiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} choiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoiceApi
     */
    public getChoice(choiceId: string, options?: RawAxiosRequestConfig) {
        return ChoiceApiFp(this.configuration).getChoice(choiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChoiceApi
     */
    public getChoices(options?: RawAxiosRequestConfig) {
        return ChoiceApiFp(this.configuration).getChoices(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SceneApi - axios parameter creator
 * @export
 */
export const SceneApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [sceneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneDelete: async (sceneId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Scene`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sceneId !== undefined) {
                localVarQueryParameter['sceneId'] = sceneId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Scene`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateSceneDTO} [createSceneDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScenePut: async (createSceneDTO?: CreateSceneDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Scene`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSceneDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneSceneIdGet: async (sceneId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sceneId' is not null or undefined
            assertParamExists('apiSceneSceneIdGet', 'sceneId', sceneId)
            const localVarPath = `/api/Scene/{sceneId}`
                .replace(`{${"sceneId"}}`, encodeURIComponent(String(sceneId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SceneApi - functional programming interface
 * @export
 */
export const SceneApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SceneApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [sceneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSceneDelete(sceneId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSceneDelete(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneApi.apiSceneDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSceneGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SceneDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSceneGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneApi.apiSceneGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateSceneDTO} [createSceneDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScenePut(createSceneDTO?: CreateSceneDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScenePut(createSceneDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneApi.apiScenePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSceneSceneIdGet(sceneId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SceneDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSceneSceneIdGet(sceneId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SceneApi.apiSceneSceneIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SceneApi - factory interface
 * @export
 */
export const SceneApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SceneApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [sceneId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneDelete(sceneId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiSceneDelete(sceneId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<SceneDTO>> {
            return localVarFp.apiSceneGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateSceneDTO} [createSceneDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScenePut(createSceneDTO?: CreateSceneDTO, options?: RawAxiosRequestConfig): AxiosPromise<SceneDTO> {
            return localVarFp.apiScenePut(createSceneDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} sceneId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSceneSceneIdGet(sceneId: string, options?: RawAxiosRequestConfig): AxiosPromise<SceneDTO> {
            return localVarFp.apiSceneSceneIdGet(sceneId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SceneApi - object-oriented interface
 * @export
 * @class SceneApi
 * @extends {BaseAPI}
 */
export class SceneApi extends BaseAPI {
    /**
     * 
     * @param {string} [sceneId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public apiSceneDelete(sceneId?: string, options?: RawAxiosRequestConfig) {
        return SceneApiFp(this.configuration).apiSceneDelete(sceneId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public apiSceneGet(options?: RawAxiosRequestConfig) {
        return SceneApiFp(this.configuration).apiSceneGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateSceneDTO} [createSceneDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public apiScenePut(createSceneDTO?: CreateSceneDTO, options?: RawAxiosRequestConfig) {
        return SceneApiFp(this.configuration).apiScenePut(createSceneDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} sceneId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SceneApi
     */
    public apiSceneSceneIdGet(sceneId: string, options?: RawAxiosRequestConfig) {
        return SceneApiFp(this.configuration).apiSceneSceneIdGet(sceneId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StoryApi - axios parameter creator
 * @export
 */
export const StoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStoryDTO} [createStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStory: async (createStoryDTO?: CreateStoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Story`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createStoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStory: async (storyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('deleteStory', 'storyId', storyId)
            const localVarPath = `/api/Story/{storyId}`
                .replace(`{${"storyId"}}`, encodeURIComponent(String(storyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} storyId 
         * @param {EditStoryDTO} [editStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStory: async (storyId: string, editStoryDTO?: EditStoryDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('editStory', 'storyId', storyId)
            const localVarPath = `/api/Story/{storyId}`
                .replace(`{${"storyId"}}`, encodeURIComponent(String(storyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editStoryDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStories: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Story`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStory: async (storyId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'storyId' is not null or undefined
            assertParamExists('getStory', 'storyId', storyId)
            const localVarPath = `/api/Story/{storyId}`
                .replace(`{${"storyId"}}`, encodeURIComponent(String(storyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StoryApi - functional programming interface
 * @export
 */
export const StoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateStoryDTO} [createStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createStory(createStoryDTO?: CreateStoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createStory(createStoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.createStory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteStory(storyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteStory(storyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.deleteStory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} storyId 
         * @param {EditStoryDTO} [editStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editStory(storyId: string, editStoryDTO?: EditStoryDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editStory(storyId, editStoryDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.editStory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStories(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStories(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.getStories']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStory(storyId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStory(storyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StoryApi.getStory']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StoryApi - factory interface
 * @export
 */
export const StoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StoryApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateStoryDTO} [createStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createStory(createStoryDTO?: CreateStoryDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createStory(createStoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteStory(storyId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteStory(storyId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} storyId 
         * @param {EditStoryDTO} [editStoryDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editStory(storyId: string, editStoryDTO?: EditStoryDTO, options?: RawAxiosRequestConfig): AxiosPromise<StoryDTO> {
            return localVarFp.editStory(storyId, editStoryDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStories(options?: RawAxiosRequestConfig): AxiosPromise<Array<StoryDTO>> {
            return localVarFp.getStories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} storyId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStory(storyId: string, options?: RawAxiosRequestConfig): AxiosPromise<StoryDTO> {
            return localVarFp.getStory(storyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StoryApi - object-oriented interface
 * @export
 * @class StoryApi
 * @extends {BaseAPI}
 */
export class StoryApi extends BaseAPI {
    /**
     * 
     * @param {CreateStoryDTO} [createStoryDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public createStory(createStoryDTO?: CreateStoryDTO, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).createStory(createStoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} storyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public deleteStory(storyId: string, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).deleteStory(storyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} storyId 
     * @param {EditStoryDTO} [editStoryDTO] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public editStory(storyId: string, editStoryDTO?: EditStoryDTO, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).editStory(storyId, editStoryDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public getStories(options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).getStories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} storyId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    public getStory(storyId: string, options?: RawAxiosRequestConfig) {
        return StoryApiFp(this.configuration).getStory(storyId, options).then((request) => request(this.axios, this.basePath));
    }
}



